üë§ Usu√°rios (API)
    User Story 1: Cadastro de um Novo Usu√°rio
        Como um administrador,
        eu quero cadastrar um novo usu√°rio no sistema,
        para que ele possa acessar as funcionalidades permitidas.

        Crit√©rios de Aceita√ß√£o:
        Ao realizar uma requisi√ß√£o POST para /users com um payload JSON v√°lido (contendo os campos obrigat√≥rios), a API deve retornar o status code 201 Created.
        O corpo da resposta deve conter o objeto do usu√°rio rec√©m-criado, incluindo um id gerado pelo sistema.
        Ao tentar cadastrar um usu√°rio com um payload JSON incompleto (faltando campos obrigat√≥rios), a API deve retornar o status code 400 Bad Request e uma mensagem indicando os campos ausentes.

    User Story 2: Listagem de Todos os Usu√°rios cadastrados
        Como um administrador,
        eu quero listar todos os usu√°rios cadastrados no sistema,
        para que eu possa ter uma vis√£o geral dos acessos.

        Crit√©rios de Aceita√ß√£o:
        Ao realizar uma requisi√ß√£o GET para /users, a API deve retornar o status code 200 OK.
        O corpo da resposta deve conter um array JSON com a lista de usu√°rios.
        Cada objeto de usu√°rio no array deve conter os campos relevantes (como id, nome, email, etc.).
        Se n√£o houver usu√°rios cadastrados, a API deve retornar um array vazio ([]) com status 200 OK.

    User Story 3: Busca de Usu√°rio por ID
        Como um administrador,
        eu quero buscar um usu√°rio espec√≠fico pelo seu ID,
        para que eu possa verificar ou gerenciar seus detalhes.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de usu√°rio existente, ao realizar uma requisi√ß√£o GET para /users/{id}, a API deve retornar o status code 200 OK.
        O corpo da resposta deve conter um objeto JSON com os detalhes completos do usu√°rio solicitado.
        Dado um ID de usu√°rio inexistente, ao realizar uma requisi√ß√£o GET para /users/{id}, a API deve retornar o status code 404 Not Found.
        Para um ID inexistente, o corpo da resposta deve conter a mensagem de erro informativa: {"message": "Usu√°rio n√£o encontrado"}.

    User Story 4: Exclus√£o de um Usu√°rio
        Como um administrador,
        eu quero excluir um usu√°rio do sistema,
        para que ele perca o acesso.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de usu√°rio existente, ao realizar uma requisi√ß√£o DELETE para /users/{id}, a API deve retornar o status code 200 OK com uma mensagem de sucesso.
        O corpo da resposta deve conter a mensagem de sucesso: {"message": "Usu√°rio exclu√≠do com sucesso"}.
        Dado um ID de usu√°rio inexistente, ao realizar uma requisi√ß√£o DELETE para /users/{id}, a API deve retornar o status code 404 Not Found com a mensagem: {"message": "Usu√°rio n√£o encontrado para exclus√£o."}.

üè∑Ô∏è Categorias (API)
    User Story 5: Cadastro de uma Nova Categoria
        Como um administrador,
        eu quero cadastrar uma nova categoria de produto,
        para que os produtos possam ser organizados.

        Crit√©rios de Aceita√ß√£o:
        Ao realizar uma requisi√ß√£o POST para /categories com um payload JSON v√°lido (contendo o nome da categoria), a API deve retornar o status code 201 Created.
        A resposta deve conter o objeto da categoria criada, incluindo um id gerado pela API.
        Ao tentar cadastrar uma categoria sem o campo nome no payload, a API deve retornar o status code 400 Bad Request e uma mensagem indicando a aus√™ncia do campo: {"message": "Por favor, preencha todos os campos obrigat√≥rios: nome e descri√ß√£o."}.

    User Story 6: Listagem de Todas as Categorias
        Como um usu√°rio,
        eu quero listar todas as categorias de produtos,
        para que eu possa navegar pelos diferentes tipos de produtos.

        Crit√©rios de Aceita√ß√£o:
        Ao realizar uma requisi√ß√£o GET para /categories, a API deve retornar o status code 200 OK.
        A resposta deve conter um array JSON com a lista de categorias.
        Cada objeto de categoria no array deve conter os campos relevantes (como id e nome).

    User Story 7: Busca de Categoria por ID
        Como um usu√°rio,
        eu quero buscar uma categoria espec√≠fica pelo seu ID,
        para que eu possa obter detalhes sobre ela.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de categoria existente, ao realizar uma requisi√ß√£o GET para /categories/{id}, a API deve retornar o status code 200 OK.
        A resposta deve conter um objeto JSON com os detalhes da categoria solicitada.
        Dado um ID de categoria inexistente, ao realizar uma requisi√ß√£o GET para /categories/{id}, a API deve retornar o status code 404 Not Found.
        Para um ID inexistente, o corpo da resposta deve conter uma mensagem de erro informativa (ex: {"message": "Categoria n√£o encontrada"}).

    User Story 8: Atualiza√ß√£o de uma Categoria Existente
        Como um administrador,
        eu quero atualizar o nome de uma categoria existente,
        para que a descri√ß√£o esteja sempre atualizada.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de categoria existente, ao realizar uma requisi√ß√£o PUT para /categories/{id} com um payload JSON v√°lido (contendo o campo nome), a API deve retornar o status code 200 OK.
        A resposta deve conter o objeto da categoria com o nome atualizado.
        Dado um ID de categoria inexistente, ao realizar uma requisi√ß√£o PUT para /categories/{id}, a API deve retornar o status code 404 Not Found.
        Ao tentar atualizar uma categoria sem o campo nome no payload, a API deve retornar o status code 400 Bad Request e uma mensagem indicando a aus√™ncia do campo "nome": {"message": "Por favor, adicione um nome para a categoria."}.

    User Story 9: Exclus√£o de uma Categoria
        Como um administrador,
        eu quero excluir uma categoria existente,
        para que ela n√£o seja mais utilizada para classificar produtos.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de categoria existente, ao realizar uma requisi√ß√£o DELETE para /categories/{id}, a API deve retornar o status code 200 OK com uma mensagem de sucesso.
        O corpo da resposta deve conter uma mensagem de sucesso {"message": "Categoria removida com sucesso"}.
        Dado um ID de categoria inexistente, ao realizar uma requisi√ß√£o DELETE para /categories/{id}, a API deve retornar o status code 404 Not Found.

üõí Produtos (API)
    User Story 10: Listagem de Todos os Produtos
        Como um cliente,
        eu quero listar todos os produtos dispon√≠veis,
        para que eu possa ver o cat√°logo completo da loja.

        Crit√©rios de Aceita√ß√£o:
        Ao realizar uma requisi√ß√£o GET para //products, a API deve listar todos os produtos cadastrados e retornar o status code 200 OK.
        O corpo da resposta deve conter um array JSON com a lista de produtos.
        Cada objeto de produto no array deve conter os campos: id (inteiro), nome (string), preco (n√∫mero), descri√ß√£o (string), quantidade (inteiro) e categoria (string ou objeto).
        Se n√£o houver produtos cadastrados, a API deve retornar um array vazio ([]) com status 200 OK e a mensagem: Nenhum produto encontrado para essa categoria.

    User Story 11: Busca de Produto por ID
        Como um cliente,
        eu quero buscar um produto espec√≠fico pelo seu ID,
        para que eu possa ver seus detalhes.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de produto existente, ao realizar uma requisi√ß√£o GET para /products/{id}, a API deve retornar o status code 200 OK.
        O corpo da resposta deve conter um objeto JSON com os detalhes completos do produto solicitado correspondente ao {id} pesquisado.
        Dado um ID de produto inexistente, ao realizar uma requisi√ß√£o GET para /products/{id}, a API deve retornar o status code 404 Not Found.
        Para um ID inexistente, o corpo da resposta deve conter a mensagem de erro {"message": "Produto n√£o encontrado"}.

    User Story 12: Cadastro de um Novo Produto
        Como um administrador,
        eu quero cadastrar um novo produto no sistema,
        para que ele fique dispon√≠vel no cat√°logo de vendas.

        Crit√©rios de Aceita√ß√£o:
        Ao realizar uma requisi√ß√£o POST para /products com um payload JSON v√°lido (contendo nome, pre√ßo, descri√ß√£o, quantidade e categoria), a API deve retornar o status code 201 Created.
        O corpo da resposta deve conter o objeto do produto rec√©m-criado, incluindo o id gerado pelo sistema.
        Ao tentar cadastrar um produto com um ou mais campos obrigat√≥rios faltando no payload, a API deve retornar o status code 400 Bad Request.
        Ao tentar cadastrar um produto com tipos de dados inv√°lidos (ex: pre√ßo como string), a API deve retornar o status code 400 Bad Request.

    User Story 13: Atualiza√ß√£o de um Produto Existente
        Como um administrador,
        eu quero atualizar as informa√ß√µes de um produto existente,
        para que os dados do cat√°logo se mantenham corretos.

        Crit√©rios de Aceita√ß√£o:
        Dado um id de produto existente, ao realizar uma requisi√ß√£o PUT para /products/{id} com um payload JSON v√°lido, a API deve retornar o status code 200 OK.
        O corpo da resposta deve conter o objeto do produto com as informa√ß√µes atualizadas.
        Dado um ID de produto inexistente, ao realizar uma requisi√ß√£o PUT para /products/{id}, a API deve retornar o status code 404 Not Found.
        Ao tentar atualizar um produto com tipos de dados inv√°lidos nos campos, a API deve retornar o status code 400 Bad Request.

    User Story 14: Exclus√£o de um Produto
        Como um administrador,
        eu quero excluir um produto do sistema,
        para que ele n√£o esteja mais dispon√≠vel para venda.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de produto existente, ao realizar uma requisi√ß√£o DELETE para /products/{id}, a API deve retornar o status code 200 OK e a mensagem de confirma√ß√£o {"message": "produto removido com sucesso"}.
        Dado um ID de produto inexistente, ao realizar uma requisi√ß√£o DELETE para /products/{id}, a API deve retornar o status code 404 Not Found e a mensagem de erro {"message": "produto n√£o encontrado para exclus√£o"}.

    User Story 15: Listagem de Produtos por Categoria
        Como um cliente,
        eu quero listar todos os produtos de uma categoria espec√≠fica,
        para que eu possa encontrar itens semelhantes mais facilmente.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de categoria existente, ao realizar uma requisi√ß√£o GET para /products/categories/{categoriaId}, a API deve retornar 200 OK e uma lista de produtos pertencentes a essa categoria.
        Dado um ID de categoria inexistente, ao realizar uma requisi√ß√£o GET para /products/categories/{categoriaId}, a API deve retornar 404 Not Found e a mensagem de erro {"message": "Categoria n√£o encontrada"}.
        Dado um ID de categoria que existe mas n√£o possui produtos associados, a API deve retornar 200 OK e um array vazio ([]).


üì¶ Pedidos (API)
    User Story 16: Cadastro de um Novo Pedido
        Como um cliente,
        eu quero criar um novo pedido,
        para que eu possa comprar os produtos desejados.

        Crit√©rios de Aceita√ß√£o:
        Ao realizar uma requisi√ß√£o POST para /orders com um payload JSON v√°lido (contendo os dados necess√°rios para o pedido), a API deve retornar o status code 201 Created.
        A resposta deve conter o objeto do pedido criado, incluindo um id gerado pela API e outros detalhes relevantes do pedido.
        Ao tentar criar um pedido com um payload JSON incompleto (faltando informa√ß√µes obrigat√≥rias), a API deve retornar o status code 400 Bad Request e uma mensagem indicando os campos ausentes.
        Ao tentar criar um pedido com dados inv√°lidos (ex: um ID de produto inexistente), a API deve retornar o status code 404 Not Found com a mensagem: {"message": "Produto com ID {id} n√£o encontrado. Por favor, forne√ßa um ID de produto v√°lido e existente."}.

    User Story 17: Listagem de Todos os Pedidos
        Como um administrador,
        eu quero listar todos os pedidos realizados,
        para que eu possa gerenciar as vendas.

        Crit√©rios de Aceita√ß√£o:
        Ao realizar uma requisi√ß√£o GET para /orders, a API deve retornar o status code 200 OK.
        A resposta deve conter um array JSON com a lista de todos os pedidos.
        Cada objeto de pedido no array deve conter informa√ß√µes relevantes (como id, usuarioId, itens, status, data_criacao, etc.).

    User Story 18: Busca de um Pedido por ID
        Como um cliente ou administrador,
        eu quero buscar um pedido espec√≠fico pelo seu ID,
        para que eu possa verificar os detalhes.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de pedido existente, ao realizar uma requisi√ß√£o GET para /orders/{id}, a API deve retornar o status code 200 OK.
        A resposta deve conter um objeto JSON com os detalhes do pedido solicitado.
        Dado um ID de pedido inexistente, ao realizar uma requisi√ß√£o GET para /orders/{id}, a API deve retornar o status code 404 Not Found.
        Para um ID inexistente, o corpo da resposta deve conter uma mensagem de erro informativa (ex: {"message": "Pedido n√£o encontrado"}).

    User Story 19: Atualiza√ß√£o do Status de um Pedido por ID
        Como um administrador,
        eu quero atualizar o status de um pedido (ex: "pendente", "processando", "enviado", "entregue", "cancelado"),
        para que o cliente seja informado sobre o andamento da sua compra e para controle interno.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de pedido existente, ao realizar uma requisi√ß√£o PUT para /orders/{id}/status com um payload JSON contendo o novo status, a API deve retornar o status code 200 OK.
        A resposta deve conter o objeto do pedido com o status atualizado.
        Dado um ID de pedido inexistente, ao realizar uma requisi√ß√£o PUT para /pedidos/{id}/status, a API deve retornar o status code 404 Not Found e a mensagem: {"message": "Pedido n√£o encontrado para atualiza√ß√£o de status."}.
        Ao tentar atualizar o status com um valor inv√°lido, a API deve retornar o status code 400 Bad Request e a mensagem: {"message": "Status inv√°lido. Use um dos seguintes: Pendente, Processado, Enviado, Entregue, Cancelado."}.

    User Story 20: Exclus√£o de um Pedido por ID
        Como um administrador,
        eu quero excluir um pedido espec√≠fico,
        para fins de organiza√ß√£o ou cancelamento definitivo.

        Crit√©rios de Aceita√ß√£o:
        Dado um ID de pedido existente, ao realizar uma requisi√ß√£o DELETE para /orders/{id}, a API deve retornar o status code 200 OK.
        Se a API retornar 200 OK, o corpo da resposta deve conter uma mensagem de sucesso (ex: {"message": "Pedido removido com sucesso"}).
        Dado um ID de pedido inexistente, ao realizar uma requisi√ß√£o DELETE para /orders/{id}, a API deve retornar o status code 404 Not Found com uma mensagem informativa: {"message": "Pedido n√£o encontrado para exclus√£o."}.

    User Story 21: Listagem de Todos os Pedidos de um Usu√°rio Espec√≠fico
        Como um cliente,
        eu quero listar todos os meus pedidos,
        para que eu possa acompanhar meu hist√≥rico de compras.

        Crit√©rios de Aceita√ß√£o:
        Ao realizar uma requisi√ß√£o GET para /orders/users/{usuarioId} com um usuarioId existente que possui pedidos, a API deve retornar o status code 200 OK e uma lista dos pedidos daquele usu√°rio.
        Se o usuarioId existir, mas n√£o houver pedidos associados, a API deve retornar o status code 200 OK e uma lista vazia ([]) com uma mensagem {"message": "Nenhum pedido encontrado para este usu√°rio."}.
        Se o usuarioId fornecido for inv√°lido ou inexistente, a API deve retornar o status code 404 Not Found com uma mensagem {"message": "Usu√°rio n√£o encontrado."}.

