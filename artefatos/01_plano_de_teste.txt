### Plano de Teste ###

Objetivo
    Validar a funcionalidade completa de CRUD (Criar, Ler, Atualizar, Excluir) para os endpoints de Usuários, Pedidos, Produtos e Categorias da API. O objetivo é assegurar que todas as operações funcionem conforme o esperado, a integridade dos dados seja mantida e as interações entre entidades (como listagem de produtos por categoria ou pedidos por usuário) estejam corretas.

Escopo
    Testes de API para os endpoints principais do sistema: Usuários, Pedidos, Produtos e Categorias.

Operações Cobertas:

    Usuários (/users)
        Criação de novos usuários (POST /users).
        Listagem de todos os usuários (GET /users).
        Busca de usuários por ID (GET /users/{id}).
        Exclusão de usuários (DELETE /users/{id}).

    Pedidos (/orders)
        Criação de novos pedidos (POST /orders).
        Listagem de todos os pedidos (GET /orders).
        Busca de pedidos por ID (GET /orders/{id}).
        Atualização do status de pedidos (PUT /orders/{id}).
        Exclusão de pedidos (DELETE /orders/{id}).
        Listagem de pedidos por usuário (GET /orders/users/{usuarioId}).

    Produtos (/products)
        Listagem de todos os produtos (GET /products).
        Busca de produtos por ID (GET /products/{id}).
        Criação de novos produtos (POST /products).
        Atualização de produtos existentes (PUT /products/{id}).
        Exclusão de produtos (DELETE /products/{id}).
        Listagem de produtos por categoria (GET /products/categories/{categoriaId}).

    Categorias (/categories)
        Criação de novas categorias (POST /categories).
        Listagem de todas as categorias (GET /categories).
        Busca de categorias por ID (GET /categories/{id}).
        Atualização de categorias existentes (PUT /categories/{id}).
        Exclusão de categorias (DELETE /categories/{id}).

Validações
    Status codes HTTP esperados (200 OK, 201 Created, 400 Bad Request, 404 Not Found).
    Estrutura e conteúdo do corpo da resposta JSON para operações de sucesso.
    Mensagens de erro e sucesso específicas para cada cenário (ex: "Usuário não encontrado", "Produto removido com sucesso", "Status inválido").
    Comportamento da API em cenários de sucesso e falha (ex: campos obrigatórios ausentes, IDs inexistentes, dados inválidos).

Integridade dos dados: 
    Garantir que os registros criados sejam persistidos corretamente, possam ser listados, buscados, atualizados e excluídos.
Consistência entre entidades: 
    Verificar se as listagens por ID de entidade relacionada (ex: produtos por categoria, pedidos por usuário) retornam dados precisos e se a ausência de registros é tratada adequadamente.

Ferramentas/Bibliotecas
    Robot Framework: Para automação dos testes.
    RequestsLibrary: Para realizar requisições HTTP (POST, GET, PUT, DELETE) à API.
    JSONLibrary: Para manipulação e validação de dados JSON nas respostas da API.
    Collections: Para operações com coleções (listas e dicionários) nos payloads e respostas.
    String: Para manipulação de strings (ex: geração de dados aleatórios, se necessário).
    Python: Linguagem de programação base para o Robot Framework e suas bibliotecas.

Ambiente
API Testada: https://educational-api-75qy.onrender.com/api-docs/

Documentação/Swagger: https://educational-api-75qy.onrender.com/swagger.json

Dados de Teste: Necessidade de dados de teste preparados para usuários, produtos, categorias e pedidos, incluindo IDs válidos e inválidos, bem como cenários de ausência de dados.

QA Responsável
Verônica Bueno

Cronograma
15 dias